package sample;import java.io.File;import java.io.FileNotFoundException;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Scanner;public class Cipher {    private static ArrayList<Character> sentence = new ArrayList<>();    private static ArrayList<Character> password = new ArrayList<>();    private static ArrayList<Character> result = new ArrayList<>();    //  private Scanner myReader ;    private String resultSentence = "";    public String getResultSentence() {        return this.resultSentence;    }    public String encryptText(String inputPassword, String pathName) {        System.out.println("ENCRRYP");        File myFile = new File(pathName);        /*String inputPassword = "Zebra";*/        try {            Scanner myReader = new Scanner(myFile);            // kolko je tych riadok nepoznam pocet riadkov pouzije while            String data = null;            while (myReader.hasNextLine()) {                data = myReader.nextLine();// cely riadok ulozi do premmennej data            }            for (int i = 0; i < data.length(); i++) { // text from file save to sentence                sentence.add(data.charAt(i));            }            System.out.println("Sentence from file is ");            System.out.println(sentence);            for (int i = 0; i < inputPassword.length(); i++) { /// inputPassword                password.add(Character.toUpperCase(inputPassword.charAt(i))); /// change to Uppercase            }            System.out.println("===== Password is ");            System.out.println(password);            int passwordLength = password.size();            int counter = 0;            for (int i = 0; i < sentence.size(); i++) {                if (counter == passwordLength) { // counter equal to password length counter = 0                    counter = 0;                }                int letter = (int) sentence.get(i);                if (letter < 91 && letter > 64) { //  code for big letter                    int numberAscii = 0;                    numberAscii = ((int) sentence.get(i) + (int) password.get(counter) - 65);                    if (numberAscii > 90) {                        numberAscii -= 26;                    }                    result.add((char) (numberAscii)); //add to array list letter                    counter++;                } else if (letter < 123 && letter > 96) { // code for small letter                    int countValue = 0;                    countValue = ((int) sentence.get(i) + (int) password.get(counter) - 65);                    if (countValue > 122) {                        countValue -= 26;                    }                    result.add((char) (countValue)); // add to array list letter                    counter++;                } else {                    result.add(sentence.get(i));                }            }            for (int i = 0; i < result.size(); i++) {                resultSentence += String.valueOf(result.get(i));  // put all letter to String together            }            myReader.close(); // close the file        } catch (FileNotFoundException e) {            e.printStackTrace();        } finally {        }        return resultSentence;    }    public String DecryptedText(String inputPassword, String pathName) {        System.out.println("Decrypt");        File myFile = new File(pathName);        /*String inputPassword = "Zebra";*/        try {            Scanner myReader = new Scanner(myFile);            // kolko je tych riadok nepoznam pocet riadkov pouzije while            String data = null;            while (myReader.hasNextLine()) {                data = myReader.nextLine();// cely riadok ulozi do premmennej data            }            System.out.println(data);            for (int i = 0; i < data.length(); i++) { // text from file save to sentence                sentence.add(data.charAt(i));            }            for (int i = 0; i < inputPassword.length(); i++) { /// inputPassword                password.add(Character.toUpperCase(inputPassword.charAt(i))); /// change to Uppercase            }            System.out.println("====password");            System.out.println(password);            int passwordLength = password.size();            int counter = 0;            for (int i = 0; i < sentence.size(); i++) {                if (counter == passwordLength) { // counter equal to password length counter = 0                    counter = 0;                }                int letter = (int) sentence.get(i);                if (letter < 91 && letter > 64) { //  code for big letter                    int numberAscii = 0;                        // pozor na zatvorky pretoze ty to nespravne spocita                    numberAscii = ((int) sentence.get(i) - ((int) password.get(counter) - 65));                    if (numberAscii > 90) {                        numberAscii -= 26;                    }                    if (numberAscii < 65) {                        numberAscii += 26;                    }                    result.add((char) (numberAscii)); //add to array list letter                    counter++;                } else if (letter < 123 && letter > 96) { // code for small letter                    int countValue = 0;                    countValue = ((int) sentence.get(i) -((int) password.get(counter) - 65) );                    if (countValue > 122) {                        countValue -= 26;                    }                    if (countValue < 97) {                        countValue += 26;                    }                    result.add((char) (countValue)); // add to array list letter                    counter++;                } else {                    result.add(sentence.get(i));                }            }            for (int i = 0; i < result.size(); i++) {                resultSentence += String.valueOf(result.get(i));  // put all letter to String together            }            myReader.close(); // close the file        } catch (FileNotFoundException e) {            e.printStackTrace();        } finally {        }        return resultSentence;    }    // Potrebne zmenit adresu suboru projektu    public void printFileInfo() {        /*File myfile = new File( "src\\text.txt");*/        File myfile = new File("C:\\Users\\install\\IdeaProjects\\Sifra\\src\\text.txt");        // ci je na zapis, na citannie alebo na upravu        if (myfile.exists()) {            System.out.println("File name " + myfile.getName());            System.out.println("absolute path " + myfile.getAbsolutePath());            System.out.println("size " + myfile.length());            System.out.println("Rendable " + myfile.canRead());        } else {            System.out.println("File not found");        }    }    public void createEncryptTxt(String text, String oldName) {        try {            String newName = oldName + "_encrypt.txt";            File file = new File(newName);            if (!file.exists()) {                file.createNewFile();            }            PrintWriter pw = new PrintWriter(file);            pw.println(text);            pw.close();            System.out.println("The process is successfully done my friend ");        } catch (Exception e) {            e.printStackTrace();        }    }    public void createDecryptTxt(String text, String oldName) {        try {            String newName = oldName + "_decrypt.txt";            File file = new File(newName);            if (!file.exists()) {                file.createNewFile();            }            PrintWriter pw = new PrintWriter(file);            pw.println(text);            pw.close();            System.out.println("The process is successfully done my friend ");        } catch (Exception e) {            e.printStackTrace();        }    }}